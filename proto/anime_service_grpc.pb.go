// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: proto/anime_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AnimeService_GetAnimeSuggestions_FullMethodName    = "/anime.AnimeService/GetAnimeSuggestions"
	AnimeService_StreamAnimeSuggestions_FullMethodName = "/anime.AnimeService/StreamAnimeSuggestions"
)

// AnimeServiceClient is the client API for AnimeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AnimeService provides recommendations based on user preferences
type AnimeServiceClient interface {
	GetAnimeSuggestions(ctx context.Context, in *AnimeRequest, opts ...grpc.CallOption) (*AnimeResponse, error)
	StreamAnimeSuggestions(ctx context.Context, in *AnimeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AnimeDetail], error)
}

type animeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnimeServiceClient(cc grpc.ClientConnInterface) AnimeServiceClient {
	return &animeServiceClient{cc}
}

func (c *animeServiceClient) GetAnimeSuggestions(ctx context.Context, in *AnimeRequest, opts ...grpc.CallOption) (*AnimeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnimeResponse)
	err := c.cc.Invoke(ctx, AnimeService_GetAnimeSuggestions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeServiceClient) StreamAnimeSuggestions(ctx context.Context, in *AnimeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AnimeDetail], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AnimeService_ServiceDesc.Streams[0], AnimeService_StreamAnimeSuggestions_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AnimeRequest, AnimeDetail]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AnimeService_StreamAnimeSuggestionsClient = grpc.ServerStreamingClient[AnimeDetail]

// AnimeServiceServer is the server API for AnimeService service.
// All implementations must embed UnimplementedAnimeServiceServer
// for forward compatibility.
//
// AnimeService provides recommendations based on user preferences
type AnimeServiceServer interface {
	GetAnimeSuggestions(context.Context, *AnimeRequest) (*AnimeResponse, error)
	StreamAnimeSuggestions(*AnimeRequest, grpc.ServerStreamingServer[AnimeDetail]) error
	mustEmbedUnimplementedAnimeServiceServer()
}

// UnimplementedAnimeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAnimeServiceServer struct{}

func (UnimplementedAnimeServiceServer) GetAnimeSuggestions(context.Context, *AnimeRequest) (*AnimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnimeSuggestions not implemented")
}
func (UnimplementedAnimeServiceServer) StreamAnimeSuggestions(*AnimeRequest, grpc.ServerStreamingServer[AnimeDetail]) error {
	return status.Errorf(codes.Unimplemented, "method StreamAnimeSuggestions not implemented")
}
func (UnimplementedAnimeServiceServer) mustEmbedUnimplementedAnimeServiceServer() {}
func (UnimplementedAnimeServiceServer) testEmbeddedByValue()                      {}

// UnsafeAnimeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnimeServiceServer will
// result in compilation errors.
type UnsafeAnimeServiceServer interface {
	mustEmbedUnimplementedAnimeServiceServer()
}

func RegisterAnimeServiceServer(s grpc.ServiceRegistrar, srv AnimeServiceServer) {
	// If the following call pancis, it indicates UnimplementedAnimeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AnimeService_ServiceDesc, srv)
}

func _AnimeService_GetAnimeSuggestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeServiceServer).GetAnimeSuggestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeService_GetAnimeSuggestions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeServiceServer).GetAnimeSuggestions(ctx, req.(*AnimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeService_StreamAnimeSuggestions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AnimeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AnimeServiceServer).StreamAnimeSuggestions(m, &grpc.GenericServerStream[AnimeRequest, AnimeDetail]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AnimeService_StreamAnimeSuggestionsServer = grpc.ServerStreamingServer[AnimeDetail]

// AnimeService_ServiceDesc is the grpc.ServiceDesc for AnimeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnimeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "anime.AnimeService",
	HandlerType: (*AnimeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAnimeSuggestions",
			Handler:    _AnimeService_GetAnimeSuggestions_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamAnimeSuggestions",
			Handler:       _AnimeService_StreamAnimeSuggestions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/anime_service.proto",
}
